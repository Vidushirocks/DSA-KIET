class Solution:	
	def binarysearch(self, arr, n, k):
		left=0
		right=n
		while left<=right:
		    mid=(left+right)//2
		    if arr[mid]==k:
		        return mid
		    elif arr[mid]<k:
		        left=mid+1
		    else:
		        right=mid-1
		return -1
    
arr = [3, 4, 5, 6, 7, 8, 9]
k = 4
n=len(arr)
result = binarysearch(arr,n, k)

if result != -1:
    print("Element is present at index " + str(result))
else:
    print("Not found")

#HEAP
class Solution:
    def heapify(self,arr, n, i):
        # code here
        largest=i
        l=2*i+1
        r=2*i+2
        
        if l<n and arr[i]<arr[n]:
            largest=l
        if r<n and arr[largest]<arr[n]:
            largest=r
            
        if largest!=i:
            arr[i],arr[largest]=arr[largest],arr[i]
            heapify(arr,n,largest)
	    
    def buildHeap(self,arr,n):
        st=(n//2)-1
        for i in range(st,-1,-1):
            heapify(arr,n,i)
          
    def HeapSort(self, arr, n):
        #code here
        for i in range(n//2-1,-1,-1):
            heapify(arr,n,i)
        for i in range(n-1,0,-1):
            arr[i],arr[0]=arr[0],arr[i]
            heapify(arr,i,0)

   arr = [33,35,42,10,7,8,14,19,48]
   n=len(arr)
   HeapSort(arr,n)
   print(arr)
